---
title: Immutable Collections Library for Javascript: The Paper
---

<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<link rel="stylesheet" href="http://mads379.github.com/bachelorproject/css/screen.css" type="text/css" media="screen" title="no title" charset="utf-8">	
	<!-- <link rel="stylesheet" href="file:///Users/Mads/dev/projects/bachelorproject/css/screen.css" type="text/css" media="screen" title="no title" charset="utf-8"> -->
	
</head>
<div id="container">

h1. Immutable Collections Library for Javascript <br /> _The Paper_

# "About":http://mads379.github.com/bachelorproject/
# "Documentation":http://mads379.github.com/bachelorproject/documentation
# Paper


h2(#table_of_contents). Table of Contents 

# "Preface and introduction":#preface_and_introduction
## "Problem Definition":#problem_definition
# "Background and description of the problem":#background_and_description_of_the_problem
# "Problem analysis":#problem_analysis
## "The case for immutability":#the_case_for_immutability
## "Selected Data Structures":#selected_data_structures
# "User’s guide and examples":#users_guide_and_examples
# "Technical description of the program":#technical_description_of_the_program
# "Test":#test
# "Conclusion":#conclusion
# "References":#references

h2(#preface_and_introduction). Preface and introduction

h3(#problem_definition). Problem Definition

Javascript is a widely used programming language and it is used to implement countless of web applications. Despite of its popularity javascript has a very limited collections library which only contains one data-structure: An array which can function as a regular array, a stack, and a dictionary all at the same time. 
This has lead to the development of a range of open-source collection libraries such as Google Closure[1] and TSJ-biblioteket[2]. 
However, the current collection libraries available focus on mutable collections which are implemented using destructive updates. As such the goal of this project is to create a powerful set of immutable collection classes[?1] that will make it more natural[?2] to write javascript programs in a functional manner using features like higher-order functions. 
The library will be written in Coffeescript[3], a small language that compiles to JavaScript, as it adds a few semantics that will help simplify the code.
The project will include a set of performance tests that evaluate the data-structures on different implementations of javascript to make sure the performance of the data-structures are not subject to the implementation details of a specific javascript machine.

[?1] Should i say prototypes? You don't have classes in javascript
[?2] Find a better word

h2(#background_and_description_of_the_problem). Background and description of the problem

h2(#problem_analysis). Problem analysis

h3(#the_case_for_immutability). The case for immutability 

A description of why I've chosen immutability

h3(#selected_data_structures). Selected Data Structures

Some thoughts about which data structures to implement. So far I'm considering the following

# List
## Linked List 
# Set
## Tree based
## Hash based
# Queue
## Tree based
# Map 
## Tree based
## Hash Based
# Stack
## List Based

Some references: 

# Scala
## "List":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/List.scala#L1
## "TreeMap":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/TreeMap.scala#L1
## "HashMap":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/HashMap.scala#L1
## "TreeSet":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/TreeSet.scala#L1
## "HashSet":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/HashSet.scala#L1
## "Stack":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/Stack.scala#L1
## "Queue":https://lampsvn.epfl.ch/trac/scala/browser/scala/tags/R_2_8_1_final/src//library/scala/collection/immutable/Queue.scala#L1





h2(#users_guide_and_examples). User’s guide and examples

h2(#technical_description_of_the_program). Technical description of the program

h2(#test). Test

h2(#conclusion). Conclusion

h2(#references). References




fn1. http://code.google.com/closure/

fn2. Speciale af Thomas Stjernegaard Jeppesen

fn3. http://jashkenas.github.com/coffee-script/


</div>