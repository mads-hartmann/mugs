---
title: Immutable Collections Library for Javascript: The Paper
---

<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<link rel="stylesheet" href="http://mads379.github.com/bachelorproject/css/screen.css" type="text/css" media="screen" title="no title" charset="utf-8">	
</head>


<h1 class="header">Immutable Collections Library for Javascript <br /> <em>The Paper</em></h1>
<ol id="menu">
	<li>"About":http://mads379.github.com/bachelorproject</li>
	<li>"The API":http://mads379.github.com/bachelorproject/api</li>
	<li>The Paper</li>
</ol>
<div id="container">

h2(#table_of_contents). Table of Contents 

# "Preface and introduction":#preface_and_introduction
# "Background and description of the problem":#background_and_description_of_the_problem
## "Problem Definition":#problem_definition
## "Design goals":#design_goals
## "Overview of collections":#overview_of_collections
## "Comparison with other collection libraries":#comparison_with_other_collections
## "Coffeescript":#coffeescript
# "Problem analysis":#problem_analysis
## "The case for immutability":#the_case_for_immutability
## "Selected Data Structures":#selected_data_structures
## "Operations":#operations
## "How to handle exceptional states":#how_to_handle_exceptional_states
# "User’s guide and examples":#users_guide_and_examples
# "Technical description of the program":#technical_description_of_the_program
# "Test":#test
# "Conclusion":#conclusion
# "References":#references

h2(#preface_and_introduction). Preface and introduction

This report has been written by Mads Hartmann Jensen in the months February to June(?) at the IT University of Copenhagen under the supervision of "Peter Sestoft":http://www.itu.dk/people/sestoft/.

During the project I developed an immutable collections library for Javascript written in the programming language Coffeescript.

h2(#background_and_description_of_the_problem). Background and description of the problem

h3(#problem_definition). Problem Definition

Javascript is a widely used programming language and it is used to implement countless of web applications. Despite of its popularity javascript has a very limited collections library which only contains one data-structure: An array which can function as a regular array, a stack, and a dictionary all at the same time. 
This has lead to the development of a range of open-source collection libraries such as Google Closure[1] and TSJ-biblioteket[2]. 
However, the current collection libraries available focus on mutable collections which are implemented using destructive updates. As such the goal of this project is to create a powerful set of immutable collection classes[?1] that will make it more natural[?2] to write javascript programs in a functional manner using features like higher-order functions. 
The library will be written in Coffeescript[3], a small language that compiles to JavaScript, as it adds a few semantics that will help simplify the code.
The project will include a set of performance tests that evaluate the data-structures on different implementations of javascript to make sure the performance of the data-structures are not subject to the implementation details of a specific javascript machine.

[?1] Should i say prototypes? You don't have classes in javascript
[?2] Find a better word

h3(#design_goals). Design goals

h3(#overview_of_collections). Overview of collections

h3(##comparison_with_other_collections). Comparison with other collection libraries

h3(#coffeescript). Coffeescript

What is Coffeescript and why have i chosen to use it over javascript?

h2(#problem_analysis). Problem analysis

h3(#the_case_for_immutability). The case for immutability 

A description of why I've chosen immutability

Some references: 
# Rich Hickey on immutability
# Effective java 

h3(#selected_data_structures). Selected Data Structures

Some thoughts about which data structures to implement. So far I'm considering the following

# List
## Linked List 
# Set
## Tree based
## Hash based
# Queue
## Tree based
# Map 
## Tree based
## Hash Based
# MultiMap
## Tree based
# Stack
## List Based

h3(#operations). Operations 

This section will give an overview of the different operations implemented on the data structures. 

The names of the operations are heavily inspired by the standard Scala Collections Library with the exception that *all* names are camel-cased. 

The following is the base set of operations that are implemented by all of the data structures. 

# *foldLeft*(seed)(f(acc, val) => value)
Allies the binary function 'f' on each element in the list starting from left. The function 'f' takes two arguments: The first is the accumulation of applying the function f on the elements of the collection so far. The second is the current value. 
<pre>new List(1,2,3,4,5).foldLeft(0)( (acc,elem) -> acc+elem) = 15</pre>
# *foldRight*(seed)(f(acc, val) => value)
Allies the binary function 'f' on each element in the list starting from right. The function 'f' takes two arguments: The first is the accumulation of applying the function f on the elements of the collection so far. The second is the current value. 
<pre>new List(1,2,3,4,5).foldRight(0)( (acc,elem) -> acc+elem) = 15</pre>
# *map*( f(element) => other type )
Applies the function 'f' on each element in the collection and returns a new collection with the values returned from applying the function 'f'. 
<pre>new List(1,2,3,4,5).map( elem => elem.toString() ) = List("1","2","3","4","5")</pre>
# *filter*( f(element) => boolean )
Applies the function 'f' on each element and returns a collection of the same type with the elements where the function returned true <pre>new List(1,2,3,4,5,6,7,8,9,10).filter( elem => elem > 5) = List(6,7,8,9,10)</pre>
# *forEach*( f(element) -> ...)
Apply the function f on each element in the collection returning nothing. This is all about side effects. <pre>new List(1,2,3,4,5).foreach( elem -> console.log(elem)) = undefined </pre>
# *flatMap*( f(element) => other type )
Applies the function 'f' on each element in the collection and returns a new collection with the values returned from applying the function 'f'. This will flatten the values returned form function 'f'. <pre>new List(1,2,3).map( elem => new List(elem,elem,elem) ) = List(1,1,1,2,2,2,3,3,3)</pre>
# *contains*( element )
Checks if the collection contains the element <pre>new List(1,2,3,4,5).contains(2) = true</pre>
# *isEmpty*
return true if the collection is empty. Otherwise false. <pre>new List().isEmpty() = true</pre>
# *forAll*( p: (elem) => boolean )
Returns true if the result of applying 'p' on every element returns true. Otherwise false. <pre> new List(1,2,3,4,5).forall( elem -> elem &lt; 10) = true</pre>
# *take*(n) 
Returns a collection containing the 'n' first elements of the original collection. <pre>new List(1,2,3,4,5).take(2) = List(1,2)</pre>
# *takeWhile*(p: (elem) -> boolean )
Return a list containing all of the elements of original collection where applying the function 'p' return true. I will stop once the function returns false or it hit the end of the collection. <pre>new List(1,2,3,4,5,6,7,8,9,10).takeWhile( elem -> elem &lt; 6)</pre>
# *size*() 
Returns the number of elements in the collection. <pre>new List(1,2,3,4,5).size = 5</pre>

Further, the collections can be grouped into three categories: Set, Map and Sequence which each have specialized operations. 

# *Set*
## union( set )
## intersect( set )
## difference( set )
# *Map*
## keys()
## values() 
## get( key )
# *Seq*
## reverse()
## get( position )

h3(#how_to_handle_exceptional_states). How to handle exceptional states

Explain why I've chosen to use the Option type rather than exceptions when handling operations that might not execute successfully. 

h2(#users_guide_and_examples). User’s guide and examples

Explain how to start using the library in the browser and NodeJS. Show some example programs and explain how they work.

If I have the time it would be cool to implement one or two of the problems in "Pearls of Functional algorithm design".

or
# Exercise 12.8 in Algorithms and data structures - the basic toolbox 

h2(#technical_description_of_the_program). Technical description of the program

Prototype chain of various objects. I.e. List is a prototype of Sequence etc. 

h2(#test). Test

Performance and unit tests. Show results 

h2(#conclusion). Conclusion

h2(#references). References




fn1. http://code.google.com/closure/

fn2. Speciale af Thomas Stjernegaard Jeppesen

fn3. http://jashkenas.github.com/coffee-script/


</div>
